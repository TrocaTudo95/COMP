options
{
  LOOKAHEAD=3;
}

PARSER_BEGIN(grammar)
// c√≥digo Java que invoca o parser
import java.io.*;
public class grammar {
 public static void main(String args[]) throws ParseException {
 grammar parser = new grammar(System.in);
 SimpleNode root = parser.Module();
 root.dump("");
 }
}
PARSER_END(grammar)


<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">

}
SimpleNode Module() : {}
{
  <MODULE> <ID> <LCHAVETA> ( Declaration() )* ( Function() )* <RCHAVETA>
  {
    return jjtThis;
  }
}

void Declaration() : {}
{
<<<<<<< HEAD
  ( Element() ) ( <ASSIGN> ( ( "[" ArraySize() "]") | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
=======
  ( ArrayElement() | ScalarElement() ) ( <ASSIGN> ( ( "[" ArraySize() "]") | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
>>>>>>> aa79b97c92090db0527b3a6fb5469623d6d901db
}

void Function() : {}
{
<<<<<<< HEAD
  < FUNCTION >
  < ID >
  (
    ("[" "]")? //Element
    < ASSIGN >
    < ID >)?

  < LPAR >
  (Varlist())?
  < RPAR >
  < LCHAVETA >
  Stmtlst() < RCHAVETA >
=======
  ( ( <FUNCTION> ( ArrayElement() | ScalarElement() ) <ASSIGN> <ID>
<LPAR> ( Varlist() )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist()
  )? <RPAR> ) ) <LCHAVETA> Stmtlst() <RCHAVETA>
>>>>>>> aa79b97c92090db0527b3a6fb5469623d6d901db
}

void Varlist() : {}
{
<<<<<<< HEAD
  ( Element() ) ( <VIRG> ( Element()) )*
=======
  ( ArrayElement() | ScalarElement() ) ( <VIRG> ( ArrayElement() | ScalarElement()) )*
>>>>>>> aa79b97c92090db0527b3a6fb5469623d6d901db
}

void Element() : {}
{
<ID> ("[" "]")?
}



void Stmtlst() : {}
{
( Stmt() )*
}

void Stmt() : {}
{
  While() | If() | Assign() | Call() <PVIRG>
}

void Assign() : {}
{
Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs() : {}
{
<<<<<<< HEAD
  AccessElement()
=======
  ArrayAccess() | ScalarAccess()
>>>>>>> aa79b97c92090db0527b3a6fb5469623d6d901db
}

void Rhs() : {}
{
  ( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? )| "[" ArraySize() "]"
}

void ArraySize() : {}
{
(<ID>ScalarAccess()) | <INTEGER>
}

void Term() : {}
{
<<<<<<< HEAD
  ( <ADDSUB_OP> )? ( <INTEGER> | Call() | AccessElement())
=======
  ( <ADDSUB_OP> )? ( <INTEGER> | Call() | ArrayAccess() | ScalarAccess())
>>>>>>> aa79b97c92090db0527b3a6fb5469623d6d901db
}

void Exprtest() : {}
{
<LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}

void While() : {}
{
<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

void If() : {}
{
  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA>Stmtlst() <RCHAVETA> )?
}

void Call() : {}
{
<ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}

void ArgumentList() : {}
{
Argument() ( <VIRG> Argument() )*
}

void Argument() : {}
{
( <ID> | <STRING> | <INTEGER> )
}

void AccessElement() : {/*Token t;*/}
  {
    /*t=*/<ID> (ArrayAccess(/*t.image*/) | ScalarAccess(/*t.image*/))
  }

void ArrayAccess(/*String id*/) : {}
{
  /*{jjtThis.setValue(id);}*/
"[" Index() "]"
}

void ScalarAccess(/*String id*/) : {}
{
  /*{jjtThis.setValue(id);}*/
 ( "." <SIZE> )?
}

void Index() : {}
{
  <ID> | <INTEGER>
<<<<<<< HEAD
}

JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
=======
>>>>>>> aa79b97c92090db0527b3a6fb5469623d6d901db
}
