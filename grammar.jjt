options
{
  LOOKAHEAD=2;
}

PARSER_BEGIN(grammar)
// c√≥digo Java que invoca o parser
public class grammar {
 public static void main(String args[]) throws ParseException {
 grammar parser = new grammar(System.in);
 SimpleNode root = parser.Module();
 root.dump("");
 }
}
PARSER_END(grammar)


<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
}

SimpleNode Module() : {}
{
  <MODULE> <ID> <LCHAVETA> ( Declaration() )* ( Function() )* <RCHAVETA>
  {
    return jjtThis;
  }
}

void Declaration() : {}
{
  <ID>(ArrayElementwoID() | ScalarElementwoID()) (<ASSIGN>(("[" ArraySize() "]") | (<ADDSUB_OP>)?<INTEGER>))? <PVIRG>
}

void Function() : {}
{
  <FUNCTION> <ID>
( ( (ArrayElementwoID() | ScalarElementwoID()) <ASSIGN> <ID> <LPAR> ( Varlist() )? <RPAR> )
 | ( <LPAR> ( Varlist())? <RPAR> ) ) <LCHAVETA> Stmtlst() <RCHAVETA>
}

void Varlist() : {}
{
<ID>(ArrayElementwoID() | ScalarElementwoID()) ( <VIRG> <ID>(ArrayElementwoID() | ScalarElementwoID()) )*
}

void ArrayElement() : {}
{
<ID> "[" "]"
}

void ArrayElementwoID() : {}
  {
    "[" "]"
  }

void ScalarElement() : {}
{
<ID>
}

void ScalarElementwoID() #void : {}
{
System.out.println("ScalarElement");
}

void Stmtlst() : {}
{
( Stmt() )*
}

void Stmt() : {}
{
try{
While() | If() | Assign() | Call() <PVIRG>
}
catch(ParseException e){
  error_skipto(PVIRG);
}
}

void Assign() : {}
{
Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs() : {}
{
  <ID>
(ArrayAccesswoID() | ScalarAccesswoID())
}

void Rhs() : {}
{
( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? ) | "[" ArraySize() "]"
}

void ArraySize() : {}
{
ScalarAccess() | <INTEGER>
}

void Term() : {}
{
( <ADDSUB_OP> )? ( <INTEGER> | Call() | ArrayAccess() | ScalarAccess())
}

void Exprtest() : {}
{
      try{
          <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
          }
          catch(ParseException ex){
            System.out.println("Catch Exprtest");
            error_skipto(RPAR);
          }
}

void While() : {}
{
    try{
    <WHILE> Exprtest() <LCHAVETA>
    }
    catch(ParseException ex){
      System.out.println("Catch While");
      error_skipto(LCHAVETA);
    }
    Stmtlst() <RCHAVETA>

}

void If() : {}
{
<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst() <RCHAVETA> )?
}

void Call() : {}
{
<ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}

void ArgumentList() : {}
{
Argument() ( <VIRG> Argument() )*
}

void Argument() : {}
{
( <ID> | <STRING> | <INTEGER> )
}

void ArrayAccess() : {}
{
<ID> "[" Index() "]"
}

void ScalarAccess() : {}
{
<ID> ( "." <SIZE> )?
}

void ArrayAccesswoID() : {}
{
 "[" Index() "]"
}

void ScalarAccesswoID() : {}
{
 ( "." <SIZE> )?
}

void Index() : {}
{
<ID> | <INTEGER>
}
